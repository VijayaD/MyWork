AWSTemplateFormatVersion: 2010-09-09
Description: Stack for creating Log Metric Filter and Alarms on Organizational changes.

Resources:
  AutomationAssumeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EnableOrganizationLogMetricFilterAndAlarmPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarmsForMetric
                  - logs:PutMetricFilter
                  - logs:DescribeMetricFilters
                  - ssm:StartAutomationExecution
                  - ssm:GetAutomationExecution
                Resource: '*'

  EnableOrganizationLogMetricFilterAndAlarm:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        description: |
          ### Document name - EnableOrganizationLogMetricFilterAndAlarm

          ## What does this document do?
          This runbook creates metric filters from log events related to any changes to your AWS Organization, and configure alarms around these metrics using [PutMetricFilter](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutMetricFilter.html) and [PutMetricAlarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html) APIs.

          ## Input Parameters
          * AutomationAsssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
          * LogGroupName: (Required) The name of the log group.
          * AlarmName: (Optional) The name for the alarm. This name must be unique within the Region.
          * SNSTopicForAlarmNotification: (Required) The Amazon SNS topic ARN that receives the alarm notification.

          ## Output Parameters
          * PutLogMetricFilter.Response - The standard HTTP response from PutMetricFilter API.
          * PutMetricAlarm.Response - The standard HTTP response from PutMetricAlarm API.

        schemaVersion: "0.3"
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          AutomationAssumeRole:
            type: String
            description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
            allowedPattern: ^arn:(?:aws|aws-us-gov|aws-cn):iam::\d{12}:role\/[\w+=,.@/-]+$
          LogGroupName:
            type: String
            description: (Required) The name of the log group.
            allowedPattern: ^[\.\-_/#A-Za-z0-9]{1,512}$
          SNSTopicForAlarmNotification:
            type: String
            description: (Required) The Amazon SNS topic ARN that receives the alarm notification.
            allowedPattern: ^$|^arn:(?:aws|aws-us-gov|aws-cn):sns:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:(?:[\w-]{1,256})$
        outputs:
          - PutLogMetricFilter.Response
          - PutMetricAlarm.Response
        mainSteps:
          - name: PutLogMetricFilter
            action: "aws:executeAwsApi"
            description: |
              ## PutLogMetricFilter
              Creates log metric filter for AWS Organizational changes on the specified log group.
            timeoutSeconds: 600
            inputs:
              Service: logs
              Api: PutMetricFilter
              logGroupName: "{{ LogGroupName }}"
              filterName: "OrganizationalChanges"
              filterPattern: '{
                ($.eventSource = organizations.amazonaws.com) && (
                ($.eventName = "AcceptHandshake") ||
                ($.eventName = "AttachPolicy") ||
                ($.eventName = "CreateAccount") ||
                ($.eventName = "CreateOrganizationalUnit") ||
                ($.eventName = "CreatePolicy") ||
                ($.eventName = "DeclineHandshake") ||
                ($.eventName = "DeleteOrganization") ||
                ($.eventName = "DeleteOrganizationalUnit") ||
                ($.eventName = "DeletePolicy") ||
                ($.eventName = "DetachPolicy") ||
                ($.eventName = "DisablePolicyType") ||
                ($.eventName = "EnablePolicyType") ||
                ($.eventName = "InviteAccountToOrganization") ||
                ($.eventName = "LeaveOrganization") ||
                ($.eventName = "MoveAccount") ||
                ($.eventName = "RemoveAccountFromOrganization") ||
                ($.eventName = "UpdatePolicy") ||
                ($.eventName = "UpdateOrganizationalUnit"))
                }'
              metricTransformations:
                - metricName: "OrganizationalChanges"
                  metricNamespace: "CISBenchmark"
                  metricValue: "1"
            outputs:
              - Name: Response
                Selector: $
                Type: StringMap

          - name: VerifyLogMetricFilter
            action: "aws:assertAwsResourceProperty"
            description: |
              ## VerifyLogMetricFilter
              Verifies that the log metric filter is created on the specified log group.
            timeoutSeconds: 600
            inputs:
              Service: logs
              Api: DescribeMetricFilters
              logGroupName: "{{ LogGroupName }}"
              PropertySelector: $.metricFilters[0].filterName
              DesiredValues:
                - "OrganizationalChanges"

          - name: PutMetricAlarm
            action: "aws:executeAwsApi"
            description: |
              ## PutMetricAlarm
              Creates alarm for AWS Organizational changes on the log metric.
            timeoutSeconds: 600
            inputs:
              Service: cloudwatch
              Api: PutMetricAlarm
              AlarmName: "OrganizationalChanges"
              MetricName: "OrganizationalChanges"
              Namespace: "CISBenchmark"
              Statistic: "Sum"
              Period: 300
              Threshold: 1
              ComparisonOperator: "GreaterThanOrEqualToThreshold"
              EvaluationPeriods: 1
              AlarmActions:
                - "{{ SNSTopicForAlarmNotification }}"
            outputs:
              - Name: Response
                Selector: $
                Type: StringMap

          - name: VerifyMetricAlarm
            action: "aws:assertAwsResourceProperty"
            description: |
              ## VerifyMetricAlarm
              Verifies that the alarm is created on the metric filter.
            timeoutSeconds: 600
            inputs:
              Service: cloudwatch
              Api: DescribeAlarmsForMetric
              MetricName: "OrganizationalChanges"
              Namespace: "CISBenchmark"
              PropertySelector: $.MetricAlarms[0].AlarmName
              DesiredValues:
                - "OrganizationalChanges"

Outputs:
  AutomationAssumeRoleName:
    Description: Automation Assume Role Name
    Value: !Ref AutomationAssumeRole
  AutomationDocumentName:
    Description: EnableOrganizationLogMetricFilterAndAlarm document
    Value: !Ref EnableOrganizationLogMetricFilterAndAlarm
